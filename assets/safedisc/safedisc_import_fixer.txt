; SafeDisc v1.40-2.60 Import Fixer
; Tested with x64dbg, Mar 15 2025
; Tested on:
;   The Sims (v1.40)
;   Die Siedler IV (v2.30)
;   Stronghold (v2.40)
;   GTA 3 (v2.51)
;   Stronghold Deluxe (v2.60)
; There should be no exceptions, so enable them to see if anything goes wrong
; Enable "No Script Timeout Warning"
; Script can run for multiple minutes, so be patient ;)
; -----------------------------------------------------------------------------

; Config
$iat_start = ???
$iat_size = ???
; Not to be confused with $code_end, this inclused all usercode
; also the temporary SafeDisc
$user_code_end = ???

; -----------------------------------------------------------------------------

log "SafeDisc v1.40-2.60 Import Fixer started"

bpc
bphwc
membpc

$g_proc_address = 0
$g_thunk_address = 0
$g_iat_temp = 0
$g_calls_temp = 0
$g_calls_temp_offset = 0
$g_calls_temp_end = 0
$g_call_from = 0

$code_base = mem.base(eip)
$code_size = mem.size(eip)
$code_end = $code_base + $code_size

$iat_start_org = $iat_start
$iat_end_org = $iat_start_org + $iat_size

call allocate_temp_iat

$iat_offset_temp = $g_iat_temp - $iat_start
$iat_start = $iat_start_org + $iat_offset_temp
$iat_end = $iat_end_org + $iat_offset_temp

$iat_start_store = $iat_start_org
$iat_end_store = $iat_end_org

$eip_org = eip
$esp_org = esp

$stuff_was_fixed = 1
$pass = 0

loop_until_all_fixed:
    $pass += 1
    cmp $stuff_was_fixed, 0
    je fix_iat
    log "Pass {u:$pass}"
    $stuff_was_fixed = 0


; -----------------------------------------------------------------------------
; Somewhat compareable to fix_encrypted_procs
; but it looks for more generic push/ret calls
fix_push_ret:
    ; Set high enough so that all calls are found
    ; This currently can not work in chunks due to a bug
    setmaxfindresult 1000000
    ; Not checked for overflow, so make large enough ;)
    $buffer_size = 0x10000
    alloc $buffer_size
    cmp $RESULT, 0
    je die
    $stolen_bytes_buffer = $RESULT
    ; We need to save the search result since it gets overwritten
    alloc $buffer_size
    cmp $RESULT, 0
    je die
    $pushret_locations_buffer = $RESULT
    ; Prevent infinite loop
    $register_id = -1

    findmemall 0, 68????????C3, -1, user
    cmp $RESULT, 0
    jne push_rets_found

fix_push_ret_done:
    free $stolen_bytes_buffer
    free $pushret_locations_buffer
    jmp fix_encrypted_procs

push_rets_found:

    ; Save results
    $push_id = 0
    $num_push_rets = $RESULT
next_result_push_ret:
    cmp $push_id, $num_push_rets
    jae push_rets_saved
    dword:[$pushret_locations_buffer + 4 * $push_id] = ref.addr($push_id)
    $push_id += 1
    jmp next_result_push_ret

push_rets_saved:
    $push_id = 0

loop_push_rets:
    cmp $push_id, $num_push_rets
    jae fix_push_ret_done

    $jumppad_location = dword:[$pushret_locations_buffer + 4 * $push_id]

    cmp mem.valid($jumppad_location), 1
    jne next_push_ret

    ; Check if that location is valid user code
    cmp $jumppad_location, $code_base
    jb next_push_ret

    cmp $jumppad_location, $code_end
    jae next_push_ret

    ; Get stub location
    $stub_addr = dword:[$jumppad_location + 1]

    cmp mem.valid($stub_addr), 1
    jne next_push_ret

    cmp $stub_addr, $code_base
    jb next_push_ret

    cmp $stub_addr, $user_code_end
    jae next_push_ret

    ;log "push/ret: {p:$jumppad_location} -> {p:$stub_addr}"

    ; Find a CALL to that loction to get a valid return address
    findmemall 0, E8, -1, user
    $num_calls = $RESULT
    $call_id = 0
loop_calls_push_ret:
    cmp $call_id, $num_calls
    jae no_call_push_ret
    $call_location = ref.addr($call_id)
    $call_offset = dword:[$call_location + 1]
    $call_destination = $call_location + $call_offset + 5
    cmp $call_destination, $jumppad_location
    je call_found_push_ret
    $call_id += 1
    jmp loop_calls_push_ret

no_call_push_ret:
    log "WARNING: Orphaned Push/Ret at {p:$jumppad_location}, fix by hand!"
    jmp next_push_ret

call_found_push_ret:

    $return_address = $call_location + 5
    
    call shared_get_stolen_bytes

    $stuff_was_fixed = 1

next_push_ret:
    $push_id += 1
    jmp loop_push_rets


; -----------------------------------------------------------------------------
; Fixes all encrypted local procedures by finding the jump pads
; then letting the Resolver  decrypt the data, copying it to an
; allocated buffer, returning from the proc and copying back the buffer
fix_encrypted_procs:
    ; Set high enough so that all calls are found
    ; This currently can not work in chunks due to a bug
    setmaxfindresult 1000000
    ; Not checked for overflow, so make large enough ;)
    $buffer_size = 0x10000
    alloc $buffer_size
    cmp $RESULT, 0
    je die
    $stolen_bytes_buffer = $RESULT
    ; We need to save the search result since it gets overwritten
    alloc $buffer_size
    cmp $RESULT, 0
    je die
    $jumppad_locations_buffer = $RESULT
    ; Prevent infinite loop
    $register_id = -1
    
loop_enc_procs:
    $register_id += 1

check_enc_eax:
    cmp $register_id, 0
    jne check_enc_ebx
    findmemall 0, 50B8????????870424C3, -1, user
    cmp $RESULT, 0
    je loop_enc_procs
    jmp jumppads_found

check_enc_ebx:
    cmp $register_id, 1
    jne check_enc_ecx
    findmemall 0, 53BB????????871C24C3, -1, user
    cmp $RESULT, 0
    je loop_enc_procs
    jmp jumppads_found

check_enc_ecx:
    cmp $register_id, 2
    jne check_enc_edx
    findmemall 0, 51B9????????870C24C3, -1, user
    cmp $RESULT, 0
    je loop_enc_procs
    jmp jumppads_found

check_enc_edx:
    cmp $register_id, 3
    jne check_enc_ebp
    findmemall 0, 52BA????????871424C3, -1, user
    cmp $RESULT, 0
    je loop_enc_procs
    jmp jumppads_found

check_enc_ebp:
    cmp $register_id, 4
    jne check_enc_esp
    findmemall 0, 55BD????????872C24C3, -1, user
    cmp $RESULT, 0
    je loop_enc_procs
    jmp jumppads_found

check_enc_esp:
    cmp $register_id, 5
    jne check_enc_esi
    findmemall 0, 54BC????????872424C3, -1, user
    cmp $RESULT, 0
    je loop_enc_procs
    jmp jumppads_found  

check_enc_esi:
    cmp $register_id, 6
    jne check_enc_edi
    findmemall 0, 56BE????????873424C3, -1, user
    cmp $RESULT, 0
    je loop_enc_procs
    jmp jumppads_found

check_enc_edi:
    cmp $register_id, 7
    jne fix_encrypted_procs_done
    findmemall 0, 57BF????????873C24C3, -1, user
    cmp $RESULT, 0
    je fix_encrypted_procs_done
    jmp jumppads_found

fix_encrypted_procs_done:
    free $stolen_bytes_buffer
    free $jumppad_locations_buffer
    jmp fix_register_jmp_lookup

jumppads_found:

    ; Save results
    $jumppad_id = 0
    $num_jumppads = $RESULT
next_result:
    cmp $jumppad_id, $num_jumppads
    jae jumppads_saved
    dword:[$jumppad_locations_buffer + 4 * $jumppad_id] = ref.addr($jumppad_id)
    $jumppad_id += 1
    jmp next_result

jumppads_saved:
    $jumppad_id = 0

loop_jumppads:
    cmp $jumppad_id, $num_jumppads
    jae loop_enc_procs

    $jumppad_location = dword:[$jumppad_locations_buffer + 4 * $jumppad_id]

    ; Check if that location is valid user code
    cmp $jumppad_location, $code_base
    jb next_jumppad

    cmp $jumppad_location, $code_end
    jae next_jumppad

    ;log "jumppad: {p:$jumppad_location}"

    ; Find a CALL to that loction to get a valid return address
    findmemall 0, E8, -1, user
    $num_calls = $RESULT
    $call_id = 0
loop_calls:
    cmp $call_id, $num_calls
    jae no_call
    $call_location = ref.addr($call_id)
    $call_offset = dword:[$call_location + 1]
    $call_destination = $call_location + $call_offset + 5
    cmp $call_destination, $jumppad_location
    je call_found
    $call_id += 1
    jmp loop_calls

no_call:
    log "WARNING: Orphaned Jump Pad at {p:$jumppad_location}, fix by hand!"
    jmp next_jumppad

call_found:

    $return_address = $call_location + 5

    ; Get stub location
    $stub_addr = dword:[$jumppad_location + 2]
    
    call shared_get_stolen_bytes

    ; A valid jumppad was found, we can start all over
    $stuff_was_fixed = 1
    $register_id = -1
    jmp loop_enc_procs

next_jumppad:
    $jumppad_id += 1
    jmp loop_jumppads


; -----------------------------------------------------------------------------
; Fixes register jumps with lookup
fix_register_jmp_lookup:
    ; mov eax ??; pop ecx; add eax, ecx; mov eax, [eax]; jmp eax
    findmemall 0, B8????????5903C18B00FFE0, -1
    cmp $RESULT, 0
    je loop_until_all_fixed
    cmp $RESULT, 1
    je setup_register_jmp_lookup
    error "Too many functions, improve script :("
setup_register_jmp_lookup:
    $inner_func_location = ref.addr(0)
    ;log "inner function found at {p:$inner_func_location}"
    ; Find corresponding CALL to the inner function
    findmemall 0, E8, -1, user
    $num_calls = $RESULT
    $call_id = 0

loop_register_jmp_lookup:
    cmp $call_id, $num_calls
    je loop_until_all_fixed
    $call_location = ref.addr($call_id)
    $call_offset = dword:[$call_location + 1]
    $call_destination = $call_location + $call_offset + 5
    cmp $call_destination, $inner_func_location
    jne next_register_jmp_lookup
    ; We found the setup (let's hope it's only one)
    $setup_addr = $call_location - 2
    ;log "setup starts at {p:$setup_addr}"
    jmp find_setup_calls

next_register_jmp_lookup:
    $call_id += 1
    jmp loop_register_jmp_lookup

find_setup_calls:
    ; Find corresponding CALL to the setup
    findmemall 0, E8, -1, user
    $num_calls = $RESULT
    $call_id = 0

loop_setup_calls:
    cmp $call_id, $num_calls
    je loop_until_all_fixed
    $call_location = ref.addr($call_id)
    $call_offset = dword:[$call_location + 1]
    $call_destination = $call_location + $call_offset + 5
    cmp $call_destination, $setup_addr
    jne next_setup_call
    
    ;  Ignore the strange calls with a 'ret' in front of them
    cmp byte:[$call_location - 1], 0xc3
    je next_setup_call
    
    cmp byte:[$call_location - 3], 0xc2
    je next_setup_call
    
    ; We found a call to the setup
    eip = $call_location

    ; single step until we land on a 'push ???' = start of stub
find_stub:
    call sti_safe
    cmp byte:[eip], 0x68
    jne find_stub
    
    ; Get the true destination of the CALL
    call get_address_from_stub
    cmp $g_proc_address, 0
    je next_setup_call
    
    ;log "Lookup call at {p:$call_location} -> {p:$g_proc_address}"
    
    ; Patch call
    $call_offset = $g_proc_address - $call_location - 5
    dword:[$call_location + 1] = $call_offset
    
    $stuff_was_fixed = 1
    
    eip = $eip_org
    esp = $esp_org

next_setup_call:
    $call_id += 1
    jmp loop_setup_calls
    


; -----------------------------------------------------------------------------
; Fixes the intermodular calls by executing the Resolver
; and then placing the proc address in the IAT
; or pointing the call to another thunk if the proc already
; has it's own thunk
fix_iat:

    esp = $esp_org
    eip = $eip_org

    cmp $iat_start, $iat_end
    je fix_jumps
    $target = dword:[$iat_start]
    
    cmp $target, 0
    je next_import
    cmp $target, $user_code_end
    ja next_import
    ; Check if reachable
    cmp mem.valid($target), 1
    jne next_import

    $address_bswapped = bswap($iat_start - $iat_offset_temp)

    ; Find CALLs to that stub
    ; findasm "call [0x{p:$iat_start}]", $code_base -> misses some
    ; findmemall $code_base, "FF15{p:$address_bswapped}", -1 -> has bugs
    findmemall 0, "FF15{p:$address_bswapped}", -1
    
    $call_count = $RESULT
    $call_id = 0
    process_calls:
        cmp $call_id, $call_count
        je check_call_via_indirect_jmp 
        $call_from = ref.addr($call_id)
        ;log "Call from {p:$call_from}"
        
        ; Check if there is a 'ret' in front of the call -> Resolver would crash
        cmp byte:[$call_from - 1], 0xc3
        jne not_ignored
        jmp next_call_id
    
    not_ignored:
        ; Put the return address on the stack
        esp -= 4
        dword:[esp] = $call_from + dis.len($call_from)
        
        eip = $target

        call get_and_store_address_from_stub
        cmp $g_proc_address, 0
        je next_call_id

        $g_call_from = $call_from + 2
        call save_call_temp

    next_call_id:
        $call_id += 1
        jmp process_calls

check_call_via_indirect_jmp:
    ; find "jmp [addr]"
    findmemall 0, "FF25{p:$address_bswapped}", -1
    
    $jmp_count = $RESULT
    $jmp_id = 0
    process_jmps_indirect:
        cmp $jmp_id, $jmp_count
        je check_call_via_register_eax 
        $jmp_from = ref.addr($jmp_id)

        ;log "ind. JMP from {p:$jmp_from}"

        ; Put the return address on the stack
        esp -= 4
        dword:[esp] = 0
        
        eip = $target

        call get_and_store_address_from_stub
        cmp $g_proc_address, 0
        je check_call_via_register_eax

        $g_call_from = $jmp_from + 2
        call save_call_temp

    next_jmp_id:
        $jmp_id += 1
        jmp process_jmps_indirect

check_call_via_register_eax:
    ; Find a "mov eax [addr]"
    findmemall 0, "A1{p:$address_bswapped}", -1

    $call_count = $RESULT
    $call_id = 0

    process_calls_via_register_eax:
        cmp $call_id, $call_count
        je check_call_via_register_ebx 
        $mov_at = ref.addr($call_id)
        ;log "MOV EAX at {p:$mov_at}"

        ; Put the return address on the stack
        esp -= 4
        dword:[esp] = 0
        
        eip = $target
        
        call get_and_store_address_from_stub
        cmp $g_proc_address, 0
        je check_call_via_register_ebx

        $g_call_from = $mov_at + 1
        call save_call_temp

        $call_id += 1
        jmp process_calls_via_register_eax

check_call_via_register_ebx:
    ; Find a "mov ebx [addr]"
    findmemall 0, "8B1D{p:$address_bswapped}", -1

    $call_count = $RESULT
    $call_id = 0
    process_calls_via_register_ebx:
        cmp $call_id, $call_count
        je check_call_via_register_ecx 
        $mov_at = ref.addr($call_id)
        ;log "MOV EBX at {p:$mov_at}"

        ; Put the return address on the stack
        esp -= 4
        dword:[esp] = 0
        
        eip = $target
        
        call get_and_store_address_from_stub
        cmp $g_proc_address, 0
        je check_call_via_register_ecx
    
        $g_call_from = $mov_at + 2
        call save_call_temp

        $call_id += 1
        jmp process_calls_via_register_ebx

check_call_via_register_ecx:
    ; Find a "mov ecx [addr]"
    findmemall 0, "8B0D{p:$address_bswapped}", -1

    $call_count = $RESULT
    $call_id = 0
    process_calls_via_register_ecx:
        cmp $call_id, $call_count
        je check_call_via_register_edx 
        $mov_at = ref.addr($call_id)
        ;log "MOV ECX at {p:$mov_at}"

        ; Put the return address on the stack
        esp -= 4
        dword:[esp] = 0
        
        eip = $target
        
        call get_and_store_address_from_stub
        cmp $g_proc_address, 0
        je check_call_via_register_edx
    
        $g_call_from = $mov_at + 2
        call save_call_temp

        $call_id += 1
        jmp process_calls_via_register_ecx

check_call_via_register_edx:
    ; Find a "mov edx [addr]"
    findmemall 0, "8B15{p:$address_bswapped}", -1

    $call_count = $RESULT
    $call_id = 0
    process_calls_via_register_edx:
        cmp $call_id, $call_count
        je check_call_via_register_edi 
        $mov_at = ref.addr($call_id)
        ;log "MOV EDX at {p:$mov_at}"

        ; Put the return address on the stack
        esp -= 4
        dword:[esp] = 0
        
        eip = $target
        
        call get_and_store_address_from_stub
        cmp $g_proc_address, 0
        je check_call_via_register_edi
    
        $g_call_from = $mov_at + 2
        call save_call_temp

        $call_id += 1
        jmp process_calls_via_register_edx

check_call_via_register_edi:
    ; Find a "mov edi [addr]"
    findmemall 0, "8B3D{p:$address_bswapped}", -1

    $call_count = $RESULT
    $call_id = 0
    process_calls_via_register_edi:
        cmp $call_id, $call_count
        je check_call_via_register_esi 
        $mov_at = ref.addr($call_id)
        ;log "MOV EDI at {p:$mov_at}"

        ; Put the return address on the stack
        esp -= 4
        dword:[esp] = 0
        
        eip = $target
        
        call get_and_store_address_from_stub
        cmp $g_proc_address, 0
        je check_call_via_register_esi
    
        $g_call_from = $mov_at + 2
        call save_call_temp

        $call_id += 1
        jmp process_calls_via_register_edi

check_call_via_register_esi:
    ; Find a "mov esi [addr]"
    findmemall 0, "8B35{p:$address_bswapped}", -1

    $call_count = $RESULT
    $call_id = 0
    process_calls_via_register_esi:
        cmp $call_id, $call_count
        je check_call_via_register_ebp 
        $mov_at = ref.addr($call_id)
        ;log "MOV ESI at {p:$mov_at}"

        ; Put the return address on the stack
        esp -= 4
        dword:[esp] = 0
        
        eip = $target
        
        call get_and_store_address_from_stub
        cmp $g_proc_address, 0
        je check_call_via_register_ebp
    
        $g_call_from = $mov_at + 2
        call save_call_temp

        $call_id += 1
        jmp process_calls_via_register_esi

check_call_via_register_ebp:
    ; Find a "mov ebp [addr]"
    findmemall 0, "8B2D{p:$address_bswapped}", -1

    $call_count = $RESULT
    $call_id = 0
    process_calls_via_register_ebp:
        cmp $call_id, $call_count
        je next_import 
        $mov_at = ref.addr($call_id)
        log "MOV EBP at {p:$mov_at}"

        ; Put the return address on the stack
        esp -= 4
        dword:[esp] = 0
        
        eip = $target
        
        call get_and_store_address_from_stub
        cmp $g_proc_address, 0
        je next_import
    
        $g_call_from = $mov_at + 2
        call save_call_temp

        $call_id += 1
        jmp process_calls_via_register_ebp

next_import:
    $iat_start += 4
    jmp fix_iat


; -----------------------------------------------------------------------------
; Fixes the intermodular calls that are
; routed through a jump pad via finding
; all special stubs (with ret addr) via a pattern
fix_jumps:
    ; find all occurrences of "push ADDR; push VALUE; pushfd, pushad, push esp, push VALUE, call ADDR"
    ; findmemall $code_base, 68????????68????????9C605468????????E8, -1 -> has bugs
    findmemall 0, 68????????68????????9C605468????????E8, -1
    $jump_id = 0
    $num_jumps = $RESULT
loop_jumps:
    esp = $esp_org
    eip = $eip_org
    cmp $jump_id, $num_jumps
    jae end
    $stub_addr = ref.addr($jump_id)
    cmp $stub_addr, $user_code_end
    jae next_jump
    $ret_addr = dword:[$stub_addr + 1]
    $org_addr = $ret_addr - 6
    ;log "JMP from {p:$org_addr}"
    ; Is that a valid address?
    cmp mem.valid($org_addr), 1
    jne next_jump
    ; Check that we really have a jump there
    cmp byte:[$org_addr], 0xe9
    jne next_jump
    eip = $stub_addr
    call sti_safe
    call get_and_store_address_from_stub
    cmp $g_proc_address, 0
    je next_jump
    
    ; Replace jump by call
    asm $org_addr, "call [0x{p:$g_thunk_address}]"

    $g_call_from = $org_addr + 2
    call save_call_temp

next_jump:
    $jump_id += 1
    jmp loop_jumps


; -----------------------------------------------------------------------------
; Shared subroutine to reconstruct stolen bytes
; for fix_encrypted_procs and fix_push_ret
shared_get_stolen_bytes:
    esp -= 4
    dword:[esp] = $return_address
    
    eip = $stub_addr
    
    call sti_safe
    call sti_safe
    $hw_bp = esp
    bphws $hw_bp, r
    SetHardwareBreakpointSilent $hw_bp, 1

    run
    bphwc $hw_bp

    call sti_safe

    ; Check how many bytes are left in section
    $section_end = mod.base($jumppad_location) + mod.size($jumppad_location)
    $bytes_remaining = $section_end - $jumppad_location
    cmp $bytes_remaining, $buffer_size
    jae copy_full_buffer
    $copy_size = $bytes_remaining
    jmp copy_remaining

copy_full_buffer:
    $copy_size = $buffer_size
copy_remaining:
    ;log "Copy {p:$copy_size} from {p:$jumppad_location}"
    memcpy $stolen_bytes_buffer, $jumppad_location, $copy_size
   
    ; Perform a return
    eip = dword:[esp]
    esp += 4

    call sti_safe
    call sti_safe
    $hw_bp = esp
    bphws $hw_bp, r
    SetHardwareBreakpointSilent $hw_bp, 1
    
    run
    bphwc $hw_bp

    ; Copy back stolen bytes
    memcpy $jumppad_location, $stolen_bytes_buffer, $copy_size

    ret


; -----------------------------------------------------------------------------
; We need to be at the start of the stub
; The address will be returned via the global $g_proc_address
; Will be zero if an error occurs
get_address_from_stub:
    $esp_org_stub = esp
    $g_proc_address = 0

    $ret_addr = dword:[esp]
    call sti_safe
    call sti_safe
    $hw_bp = esp
    bphws $hw_bp, r
    SetHardwareBreakpointSilent $hw_bp, 1
    run
    bphwc $hw_bp

    call rtr_safe
    
    ; Check that we really arrived at the function
    cmp dword:[esp+4], $ret_addr
    je stub_ok
    jmp die

stub_ok:
    $g_proc_address = dword:[esp]

    ; Eat up the return address
    esp = $esp_org_stub + 4
    ret


; -----------------------------------------------------------------------------
; This is basically a complicated 'sti' since x32dbg sometimes swallows an 
; sti right after eip has changed (or something like that)
sti_safe:
    $eip_initial = eip
perform_sti:
    cmp $eip_initial, eip
    jne sti_performed
    sti
    jmp perform_sti
sti_performed:
    ret


; -----------------------------------------------------------------------------
; This is basically a complicated 'rtr' since the real command did not work
rtr_safe:
    cmp byte:[eip], 0xC3
    je rtr_performed
    sto
    jmp rtr_safe
rtr_performed:
    ret


; -----------------------------------------------------------------------------
; Stores the address in $g_proc_address to the IAT
; The IAT thunk address is returned via $g_thunk_address
store_in_iat:
    ; Do we have this thunk already?
    call get_iat_slot
    cmp $g_thunk_address, 0
    je perform_store_in_iat
    ret
    
perform_store_in_iat:
    call get_free_iat_slot
    cmp $g_thunk_address, 0
    je iat_full
    dword:[$g_thunk_address] = $g_proc_address	
    ret


; -----------------------------------------------------------------------------
; Remembers a call in the $g_calls_temp buffer
save_call_temp:
    cmp $g_calls_temp_offset, $g_calls_temp_end
    je iat_full
    dword:[$g_calls_temp_offset] = $g_call_from
    dword:[$g_calls_temp_offset + 4] = $g_thunk_address
    $g_calls_temp_offset += 8
    dword:[$g_call_from] = 0
    ret


; -----------------------------------------------------------------------------
; Writes all the saved calls/jmps back to their locations
write_back_saved_calls:
    cmp $g_calls_temp_offset, $g_calls_temp
    jbe write_back_done
    $g_calls_temp_offset -= 8
    dword:[dword:[$g_calls_temp_offset]] = dword:[$g_calls_temp_offset + 4]
    jmp write_back_saved_calls
write_back_done:
    ret


; -----------------------------------------------------------------------------
; Returns the address of the IAT slot in $g_thunk_address
; for a given proc address in $g_proc_address
; If it can not be found, 0 is returned
get_iat_slot:
    $search_iat_start = $iat_start_store
    $search_iat_end = $iat_end_store

    search_thunk:
        cmp $search_iat_start, $search_iat_end
        je thunk_not_found

        cmp dword:[$search_iat_start], $g_proc_address
        jne next_thunk
        $g_thunk_address = $search_iat_start
        ret

    next_thunk:
        $search_iat_start += 4
        jmp search_thunk

    thunk_not_found:
        $g_thunk_address = 0
        ret


; -----------------------------------------------------------------------------
; Returns the address of the next free IAT slot in $g_thunk_address
; If not free slot is available, 0 is returned
get_free_iat_slot:
    ; Search for an empty slot
    $search_iat_start = $iat_start_store
    $search_iat_end = $iat_end_store

    search_empty_slot:
        cmp $search_iat_start, $search_iat_end
        je no_free_slot

        cmp dword:[$search_iat_start], 0
        jne next_slot
        $g_thunk_address = $search_iat_start
        ret

    next_slot:
        $search_iat_start += 4
        jmp search_empty_slot
    
    no_free_slot:
        $g_thunk_address = 0
        ret


; -----------------------------------------------------------------------------
; Combination of get_address_from_stub + store_in_iat
get_and_store_address_from_stub:
    call get_address_from_stub
    cmp $g_proc_address, 0
    je get_and_store_address_from_stub_done
    call store_in_iat
get_and_store_address_from_stub_done:
    ret


; -----------------------------------------------------------------------------
; Allocates a temporary IAT
allocate_temp_iat:
    alloc $iat_size
    cmp $RESULT, 0
    je die
    $g_iat_temp = $RESULT

    ; max 100 calls per entry
    $calls_temp_size = $iat_size * 100 * 8
    alloc $calls_temp_size
    cmp $RESULT, 0
    je die
    $g_calls_temp = $RESULT
    $g_calls_temp_offset = $g_calls_temp
    $g_calls_temp_end = $g_calls_temp + $calls_temp_size

    $iat_slot_addr = $iat_start_org
    $iat_slot_addr_temp = $g_iat_temp

temp_iat_loop:
    cmp $iat_slot_addr, $iat_end_org
    je temp_iat_done
    ; Copy entry
    dword:[$iat_slot_addr_temp] = dword:[$iat_slot_addr]

    cmp dword:[$iat_slot_addr], $user_code_end
    ja non_broken_entry
    dword:[$iat_slot_addr] = 0

non_broken_entry:
    $iat_slot_addr += 4
    iat_slot_addr_temp += 4
    jmp temp_iat_loop

temp_iat_done:
    ret


; -----------------------------------------------------------------------------


iat_full:
    error "IAT full"


die:
    error "Something went wrong, aborting"


end:
    call write_back_saved_calls
    cmp $g_iat_temp, 0
    je no_temp_iat
    free $g_iat_temp
    $g_iat_temp = 0
no_temp_iat:
    cmp $g_calls_temp, 0
    je no_temp_calls
    free $g_calls_temp
    $g_calls_temp = 0
no_temp_calls:
    esp = $esp_org
    eip = $eip_org
    log "Done ;)"